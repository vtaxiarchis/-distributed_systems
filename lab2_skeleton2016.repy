# FEEL FREE TO CHANGE THE CODE.
# This is just a dull example

# ------------------------------------------------------------------------------
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try:
    listencommhandle = waitforconn(ip, port, board_connection_handler)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass

# ------------------------------------------------------------------------------
# Called when an incoming message is received.
# --> Important starting point
# ------------------------------------------------------------------------------
def board_connection_handler(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    #print 'CHANGE ME!!!\n'

    #print '****Request:\n%s' % msgheader[5:15]
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
      get_board_handler(msgheader, sockobj, thiscommhandle)
    elif msgheader.startswith( 'POST' ):
      # Send post when the vessel is the leader
      if mycontext['leader']== True:
        post_board_handler(msgheader, sockobj, thiscommhandle)
        # If the vessel that made the post is the leader send the post to all other vessels
        broadcast(msgheader)
        print "Sending data to all the vessels"
      # Send post when the vessel is not the leader
      else:
        update="Update"+"%"+ msgheader
        # Every new post (except from the leader) goes to the leader
        send_to_vessel(update,mycontext['leaderAddress'])
        print "Sending data to the leader"
    # Only the leader update all the other vessels
    elif msgheader.startswith('Update'):
      if mycontext['leader']== True: # Just a Fail Safe, Only leader Should be Getting update messages
        mycontext['lock'].acquire()
        updatemsg = msgheader.split("%")
        mycontext['lock'].release()
        post_board_handler(updatemsg[1], sockobj, thiscommhandle)
        broadcast(updatemsg[1])
        print "Sending data to all the vessels"
    # Receiving "Election" messages
    elif msgheader.startswith( 'Election' ):
      mycontext['lock'].acquire()
      buff=msgheader.replace('Election',"")
      neighbor_ip = mycontext['neighborip']
      buff = buff.split("%")
      mycontext['lock'].release()
      print buff
      sleep(2)
      # Constract tuples of IDs and IPs for all vessels
      id_pairs =zip(buff[::2],buff[1::2])
      print id_pairs[0][0]
      # Constract "Coordination" messages between the vessels
      if id_pairs[0][0] == mycontext['id']:
        # Sort tuples from the lowest to the highest ID and send to the neighbor
        id_pairs.sort()
        mycontext['lock'].acquire()
        coordination= "Coordination"+"%s"%(id_pairs[0][0])+"%"+"%s"%(id_pairs[0][1])
        mycontext['lock'].release()
        send_to_vessel(coordination,neighbor_ip)
      else:
        mycontext['lock'].acquire()
        appendid=msgheader+ "%" + str(mycontext['id']) + "%" + str(mycontext['port'])
        mycontext['lock'].release()
        send_to_vessel(appendid,neighbor_ip)
    # Receiving "Coordination" messages
    elif msgheader.startswith('Coordination'):
      buff2 = msgheader[12:]
      buff2 = buff2.split("%")
      if buff2[0] == mycontext['id']:
        mycontext['leader']= True   # Global variable indicating if the vessel is the leader
        mycontext['leaderAddress'] = mycontext['port']
        print "Hey, I am the Leader!!!"
      else:
        mycontext['leaderAddress'] = buff2[1]   # Global variable with leader IP address
        print "My leader is " + buff2[1]
    else:
      #executed only if msgheader does not start with GET or POST
      #this means that a vessel receives a message from another vessel
      print "Receiving data from other vessel"
      #call post_board_handler utility without the string in the front of the message
      post_board_handler(msgheader[4:], sockobj, thiscommhandle)

  except Exception, e:

    print "Exception in board: %s, %s\n" %(type(e), e)
    #raise


# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_board_handler(msgheader, sockobj, thiscommhandle):
  msg=""
  htmlresponse = generate_html_page()
  res=make_http_response(200, 'OK', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle)


# ------------------------------------------------------------------------------
# Handles POST,MODIFY AND DELETE request from browser.
# ------------------------------------------------------------------------------
def post_board_handler(msgheader, sockobj, thiscommhandle):
  # extract the query from the HTTP request
  query = extract_http_request_contents(msgheader)
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  #extract the  id parameter from the request
  id_string = id_parameters_from_header(msgheader)
  # check the lenght of the parameters, if its 2 we are dealing with a delete or modify
  if len(parameters) == 2:
    check = parameters['delete']
    #if check = 0 then its a modify
    if check == "0":
      print "Modifying %s" %id_string
      mycontext['blackb'][int(id_string)] = parameters['entry']
      htmlresponse = "Entry Modified"
      res=make_http_response(200, 'OK', htmlresponse)
      sockobj.send(res)
      stopcomm(thiscommhandle)
    # If its not 0 then its a delete
    elif check =="1":
      if mycontext['blackb'][int(id_string)] !="":
        print "Deleting %s" %id_string
	mycontext['blackb'][int(id_string)]=""
	htmlresponse = "Entry Deleted"
        res=make_http_response(200, 'OK', htmlresponse)
	sockobj.send(res)
        stopcomm(thiscommhandle)
      else:
        htmlresponse = "Entry Already Deleted"
        res=make_http_response(200, 'OK', htmlresponse)
	sockobj.send(res)
    	stopcomm(thiscommhandle)
    else:
      print "Entry not Found"

  elif len(parameters) == 1:
    # Insert the new entry into the blackboard
    msg = parameters['entry']
    mycontext['blackb'].append(msg)
    htmlresponse = "Message Posted"
    res=make_http_response(200, 'OK', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)
  else:
    # Do not mix HTML code with the server code as done here. This is a bad practice
    template='<html><head><style>.status {color: red;font-size: 75%%;}</style></head><body><pre><samp class="status">%s</samp></pre></body><html>'
    htmlresponse = template % ("404 Not Found\n" + msgheader)
    res=make_http_response(404, 'Not Found', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)



# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse):
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  conent_length = header.split('Content-Length: ')[1]
  conent_length = int(conent_length.split('\r\n')[0])

  # extract the http response body and discard the header
  contetns = header[-conent_length:]
  return contetns

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ip=127.0.0.1&port=63101&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def id_parameters_from_header(header):
  words = header.split()
  idd = words[1].replace("/entries/","")
  return idd


# ------------------------------------------------------------------------------
# Outputs the blackboard html
# ------------------------------------------------------------------------------
def generate_html_page():
  #Initialize blackboard content
  entries = ""
  #sorted_dict=sorted(mycontext.items(),reverse=True)
  for i in range(len(mycontext['blackb'])):
    #entry =mycontext["/%d"%i]
    if mycontext['blackb'][i] !="":
      entry = mycontext['entry_template'] %('entries/%d' %(i),i,mycontext['blackb'][i])
      entries = "".join([entries,entry])
  mycontext['blackboard'] = entries

  #print entries
    # dynamic title showing Ip address, port and up time.
  title='Blackboard@ %s:%d. Up time: %d Leader is: %s  My ID is: %s' %( str(mycontext['ip']), mycontext['port'], int(getruntime()), mycontext['leaderAddress'], mycontext['id'])
  content = mycontext['boardcontents_template'] %( title, entries )
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entry3,"\n",entry2#, #content, fullpage
  return fullpage

# ------------------------------------------------------------------------------
# Utility used by a vessel to send a message to a single vessel
# -----------------------------------------------------------------------------
def send_to_vessel(msg,ip):
  #fixed port value of all vessels
  port = mycontext['port']
  #the message must be different than the msgheader which starts with GET or POST and ontains an extra
  #string "send" that helps other vessels to execute the else branket in the board_connection_handler
  message = msg
  #send message to one vessel
  socketobject = openconn(mycontext['ip'],int(ip))
  socketobject.send(message)
  socketobject.close()

  return

# ------------------------------------------------------------------------------
# Utility used by the leader to send a message to all the other vessels
# ------------------------------------------------------------------------------
def broadcast(msg):
  #fixed port value of all vessels
  add = mycontext['ip']
  #the message must be different than the msgheader which starts with GET or POST and ontains an extra
  #string "send" that helps other vessels to execute the else branket in the board_connection_handler
  message = "send" + msg
  #for loop to send the message to all the Vessels except the excluded one
  for address in mycontext['listofvessels']:
    socketobject = openconn(add,int(address))
    socketobject.send(message)
    socketobject.close()

  return

# ------------------------------------------------------------------------------
# Remove own vessel IP address and find the vessel neighbor address
# ------------------------------------------------------------------------------
def find_neighbor(port) :
  print "The vessels IP addresses: "
  #remove the IP address of the own vessel
  remove_my_ip = mycontext['listofvessels'].index(str(port))
  del mycontext['listofvessels'][remove_my_ip]
  print mycontext['listofvessels']
  if remove_my_ip <= (len(mycontext['listofvessels'])-1):
    return mycontext['listofvessels'][remove_my_ip]
  else :
    return mycontext['listofvessels'][0]

# ------------------------------------------------------------------------------
# Initializes Leader Election
# ---------------------------------------------------------------------
def init_election() :
  # Use of timer in order to all vessels reach this point
  sleep(3)
  election_message = "Election"+ str(mycontext['id']) + "%" + str(mycontext['port'])
  neigh_ip = mycontext['neighborip']
  #print election_message
  send_to_vessel(election_message, neigh_ip)

# ------------------------------------------------------------------------------
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise

  # Fail if we don't have 1 or 2 arguments
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip

  #read html template files
  mycontext['entry_template'] = file("entry_template.html").read()
  mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
  mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
  mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()

  # Global variables
  mycontext['authors'] = "Konstantinos Peratinos (konper@student.chalmers.se) - Vaios Taxiarchis (vaios@student.chalmers.se)"
  mycontext['blackboard']=""
  mycontext['blackb']=[]
  mycontext['id'] =str(randomfloat())
  mycontext['leader'] = False
  mycontext['leaderAddress'] = "0"
  mycontext['lock'] = getlock()

  # Read txt file with vessels IP addresses
  lines = [line.rstrip('\r\n') for line in open('ports.txt')]
  mycontext['listofvessels'] = lines
  print lines

  # Remove vessel IP address and find vessel neighbor IP address
  mycontext['neighborip'] = find_neighbor(port)

  # e = Exception("ex");
  # try:
  #   print "%s, %s\n" %(type(e), e)
  # except Exception, ee:
  #   print ee

start_board()
init_election()
