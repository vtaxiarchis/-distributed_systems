# ------------------------------------------------------------------------------
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try:
    listencommhandle = waitforconn(ip, port, board_connection_handler)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass

# ------------------------------------------------------------------------------
# Called when an incoming message is received.
# --> Important starting point
# ------------------------------------------------------------------------------
def board_connection_handler(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message]
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
      get_board_handler(msgheader, sockobj, thiscommhandle)
    ### If a post message arrives we send it to the other vessels
    elif msgheader.startswith( 'POST' ):
      post_board_handler(msgheader, sockobj, thiscommhandle)
      send_to_vessels(msgheader, thiscommhandle)
      print "Sending data to other vessels"
    else:
      #executed only if msgheader does not start with GET or POST
      #this means that a vessel receives a message from another vessel
      print "Receiving data from other vessel"
      #call post_board_handler utility without the adder string in the front of the message
      post_board_handler(msgheader[4:], sockobj, thiscommhandle)

  except Exception, e:

    print "Exception in board: %s, %s\n" %(type(e), e)
    #raise


# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_board_handler(msgheader, sockobj, thiscommhandle):
  msg=""
  htmlresponse = generate_html_page()
  res=make_http_response(200, 'OK', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle)


# ------------------------------------------------------------------------------
# Handles POST,MODIFY AND DELETE request from browser.
# ------------------------------------------------------------------------------
def post_board_handler(msgheader, sockobj, thiscommhandle):
  # extract the query from the HTTP request
  query = extract_http_request_contents(msgheader)
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  #extract the  id parameter from the request
  id_string = id_parameters_from_header(msgheader)
  # check the lenght of the parameters, if its 2 we are dealing with a delete or modify
  if len(parameters) == 2:
    check = parameters['delete']
    #if check = 0 then its a modify
    if check == "0":
      print "Modifying %s" %id_string
      #We find the entry with that id and modify it
      mycontext['blackb'][int(id_string)] = parameters['entry']
      htmlresponse = "Entry Modified"
      res=make_http_response(200, 'OK', htmlresponse)
      sockobj.send(res)
      stopcomm(thiscommhandle)
    # If its not 0 then its a delete
    elif check =="1":
      if mycontext['blackb'][int(id_string)] !="":
	# We find the entry with that id and we delete it
        print "Deleting %s" %id_string
	mycontext['blackb'][int(id_string)]=""
	htmlresponse = "Entry Deleted"
        res=make_http_response(200, 'OK', htmlresponse)
	sockobj.send(res)
        stopcomm(thiscommhandle)
      else:
	#just in case someone tries to sth that has already been deleted
        htmlresponse = "Entry Already Deleted"
        res=make_http_response(200, 'OK', htmlresponse)
	sockobj.send(res)
    	stopcomm(thiscommhandle)
    else:
      print "Entry not Found"

  elif len(parameters) == 1:
    # Insert the new entry into the blackboard
    msg = parameters['entry']
    mycontext['blackb'].append(msg)
    htmlresponse = "Message Posted"
    res=make_http_response(200, 'OK', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)
  else:
    # Do not mix HTML code with the server code as done here. This is a bad practice
    template='<html><head><style>.status {color: red;font-size: 75%%;}</style></head><body><pre><samp class="status">%s</samp></pre></body><html>'
    htmlresponse = template % ("404 Not Found\n" + msgheader)
    res=make_http_response(404, 'Not Found', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)



# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse):
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  conent_length = header.split('Content-Length: ')[1]
  conent_length = int(conent_length.split('\r\n')[0])

  # extract the http response body and discard the header
  contetns = header[-conent_length:]
  return contetns

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ip=127.0.0.1&port=63101&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def id_parameters_from_header(header):
  words = header.split()
  idd = words[1].replace("/entries/","")
  return idd


# ------------------------------------------------------------------------------
# Outputs the blackboard html
# ------------------------------------------------------------------------------
def generate_html_page():
  #Initialize blackboard content
  entries = ""
  #sorted_dict=sorted(mycontext.items(),reverse=True)
  for i in range(len(mycontext['blackb'])):
    #entry =mycontext["/%d"%i]
    if mycontext['blackb'][i] !="":
      entry = mycontext['entry_template'] %('entries/%d' %(i),i,mycontext['blackb'][i])
      entries = "".join([entries,entry])
  mycontext['blackboard'] = entries

  #print entries
    # dynamic title showing Ip address, port and up time.
  title='Sample board @ %s:%d. Up time: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()) )
  content = mycontext['boardcontents_template'] %( title, entries )
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entry3,"\n",entry2#, #content, fullpage
  return fullpage

# ------------------------------------------------------------------------------
# Utility to send message to all the other vessels
# ------------------------------------------------------------------------------
def send_to_vessels(msg, thiscommhandle):
  #All vessels share the same port
  port = mycontext['port']
  #the message must be different than the msgheader else we end up in a loop
  message = "send" + msg
  #Loop to send the message to all the vessels in
  for address in mycontext['listofvessels']:
    socketobject = openconn(address,port)
    socketobject.send(message)
    stopcomm(thiscommhandle)

  return

# ------------------------------------------------------------------------------
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise

  # Fail if we don't have 1 or 2 arguments
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip

  #read html template files
  mycontext['entry_template'] = file("entry_template.html").read()
  mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
  mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
  mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()

  mycontext['authors'] = "Konstantinos Peratinos (konper@student.chalmers.se) - Vaios Taxiarchis (vaios@student.chalmers.se)"
  mycontext['blackboard']=""
  mycontext['blackb']=[]

  #read txt files with vessel IP addresses
  lines = [line.rstrip('\n') for line in open('neighborlist.txt')]
  mycontext['listofvessels'] = lines

  print "The vessels IP addresses: "
  print mycontext['listofvessels']

  #remove the IP address of the own vessel
  remove_own_ip = mycontext['listofvessels'].index(getmyip())
  del mycontext['listofvessels'][remove_own_ip]
  print mycontext['listofvessels']

  # e = Exception("ex");
  # try:
  #   print "%s, %s\n" %(type(e), e)
  # except Exception, ee:
  #   print ee

  start_board()
